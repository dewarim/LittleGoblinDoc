default.doesnt.match.message=Property [{0}] of class [{1}] with value [{2}] does not match the required pattern [{3}]
default.invalid.url.message=Property [{0}] of class [{1}] with value [{2}] is not a valid URL
default.invalid.creditCard.message=Property [{0}] of class [{1}] with value [{2}] is not a valid credit card number
default.invalid.email.message=Property [{0}] of class [{1}] with value [{2}] is not a valid e-mail address
default.invalid.range.message=Property [{0}] of class [{1}] with value [{2}] does not fall within the valid range from [{3}] to [{4}]
default.invalid.size.message=Property [{0}] of class [{1}] with value [{2}] does not fall within the valid size range from [{3}] to [{4}]
default.invalid.max.message=Property [{0}] of class [{1}] with value [{2}] exceeds maximum value [{3}]
default.invalid.min.message=Property [{0}] of class [{1}] with value [{2}] is less than minimum value [{3}]
default.invalid.max.size.message=Property [{0}] of class [{1}] with value [{2}] exceeds the maximum size of [{3}]
default.invalid.min.size.message=Property [{0}] of class [{1}] with value [{2}] is less than the minimum size of [{3}]
default.invalid.validator.message=Property [{0}] of class [{1}] with value [{2}] does not pass custom validation
default.not.inlist.message=Property [{0}] of class [{1}] with value [{2}] is not contained within the list [{3}]
default.blank.message=Property [{0}] of class [{1}] cannot be blank
default.not.equal.message=Property [{0}] of class [{1}] with value [{2}] cannot equal [{3}]
default.null.message=Property [{0}] of class [{1}] cannot be null
default.not.unique.message=Property [{0}] of class [{1}] with value [{2}] must be unique

default.paginate.prev=Previous
default.paginate.next=Next
default.boolean.true=True
default.boolean.false=False
default.date.format=yyyy-MM-dd HH:mm:ss z
default.number.format=0

default.created.message={0} {1} created
default.updated.message={0} {1} updated
default.deleted.message={0} {1} deleted
default.not.deleted.message={0} {1} could not be deleted
default.not.found.message={0} not found with id {1}
default.optimistic.locking.failure=Another user has updated this {0} while you were editing

default.home.label=Home
default.list.label={0} List
default.add.label=Add {0}
default.new.label=New {0}
default.create.label=Create {0}
default.show.label=Show {0}
default.edit.label=Edit {0}

default.button.create.label=Create
default.button.edit.label=Edit
default.button.update.label=Update
default.button.delete.label=Delete
default.button.delete.confirm.message=Are you sure?

# Data binding errors. Use "typeMismatch.$className.$propertyName to customize (eg typeMismatch.Book.author)
typeMismatch.java.net.URL=Property {0} must be a valid URL
typeMismatch.java.net.URI=Property {0} must be a valid URI
typeMismatch.java.util.Date=Property {0} must be a valid Date
typeMismatch.java.lang.Double=Property {0} must be a valid number
typeMismatch.java.lang.Integer=Property {0} must be a valid number
typeMismatch.java.lang.Long=Property {0} must be a valid number
typeMismatch.java.lang.Short=Property {0} must be a valid number
typeMismatch.java.math.BigDecimal=Property {0} must be a valid number
typeMismatch.java.math.BigInteger=Property {0} must be a valid number

link.changes=GoblinDoc v0.7.1
hub.title=Little Goblin - The Browser Game Framework
hub.hello=Little Goblin - Documentation
hub.intro.head=Introduction
hub.intro=Little Goblin is an open source browser game framework that is intended to help you create browser games. \
  The goal is to have all the infrastructure in place allowing you to implement your idea as fast as possible, without \
  having to handle all the fundamental stuff, like user accounts, security, administration features and so on. \
  Little Goblin is currently under development, and this site collects the documentation for it.
hub.websites.head=Websites
hub.websites=There are several websites where you can get more information, download the source code (it is a \
  <a href="http://grails.org">Grails</a> application meaning it is written in Groovy, Java, HTML, JavaScript) \
  and test the current state of the game.
hub.sf.link=Little Goblin on SourceForge
hub.sf.link.info=Downloads, bug and feature tracker, mailing list, forum
hub.test.link=Test server
hub.blog.link=Admin test blog
link.imprint=Imprint
link.privacy=Privacy notice
link.home=Home
privacy.title=Privacy notice - Little Goblin
privacy.head=Privacy notice
privacy.notice=This web site does not store any personal information about you. It may use cookies to identify you \
  over the course of a visit, so we can help you with navigation, search and generally improve your browsing experience.\
  The web server log file does not store your IP address.
imprint.title=Imprint - Little Goblin
imprint.head=Imprint
imprint.info=(required by German law)<br>\
  The domain littlegoblin.de is registered and maintained by:<br><br>\
  Ingo Wiarda<br>\
  Address: Bruchsaler Str. 6 / 75053 Gondelsheim / Germany<br>\
  Mail: ingo_wiarda@dewarim.de<br>\
  Phone: 016222389333<br><br>\
  Feel free to contact me if it's about LittleGoblin - and do not send me any advertising.
hub.schedim.link=Schedim.de - the test server
hub.dewarim.link=Dewarim.com - developer's blog.

features.title=Features of Little Goblin, the browsergame framework
features.head=Features
features.intro=<strong>This page is currently under development. Links to individual feature pages will follow.</strong><br><br>\
  Little Goblin has many features, and some of them even have been implemented! \
  If you got an idea for a new one or have suggestions for improvement, please contact me.
features.social.head=Social features
features.social.intro=Social features help the players to keep in contact, interacting, \
  organizing, socializing and competing with each other - as much as they want.
messaging.link=Messaging
chat.link=Chat
order.link=Orders and Guilds
features.quests=Quests
features.crafting=Crafting and Production
features.combat=Combat
features.administration=Administration
features.items=Items and Equipment
features.tech=Tech and learning
features.resources=Resources
features.resources.intro=Little Goblin strives to make resource management easier, so your pages may contain links \
 to images, CSS files and other assets which can all be administrated through the GUI.
artist.link=Artists and Images
css.link=Cascading Style-Sheets and Layout
features.tech.intro=You can create complex tech trees with skills that are relevant for crafting, combat and quests.
skills.link=Skills
academies.link=Academies
features.quests.intro=The quest system allows for the creation of simple one-step quests like "You meet a dragon. You die." and \
  more complex ones with arbitrary length, random steps, scripted events and encounters.
quest.link=Quests
script.link=Quest scripts
features.items.intro=A player character may own and carry a number of items, or store them in his home. \
  He can buy, sell, activate, craft and wield them. Items may have scripted effects, for example healing potions \
  which restore your character's health.
changes.head=List of changes
changes.title=List of changes - Little Goblin Doc
changes.intro=This page lists the changes for the Little Goblin Documentation project. \
  For a list of changes in Little Goblin itself, please visit the <a href="http://dewarim.com/browsergame/status">status page</a>.
changes.0.1=<em>2011-02-28</em>: v0.1 Initial version. Basic layout and imprint, privacy notice, feature list.
features.link=Features
hub.pages=Content
items.link=Items and item attributes
items.scripts=Scripted items
items.categories=Item categories
features.crafting.intro=Crafting or more generally the production of items are important concepts in browser games. With Little Goblin, \
  you can setup complex chains of production, where players with the right prerequisites may produce all kinds of items.
crafting.link=Crafting
products.link=Products
features.combat.intro=Little Goblin evolved from the idea for a simple fantasy combat game to a whole browser game framework - and \
  while the combat features need much more work and tweaking, at least the combat methods do work.
combat.pve.link=Combat::PvE
combat.pvp.link=Combat::PvP [Grand Melee]
features.administration.intro=A good browser game needs to help you in two ways with administration: setup and running.
admin.stuff.link=Features for creating your own game
admin.game.link=Features for running a game

architecture.title=Little Goblin Application Architecture Overview
architecture.head=Little Goblin - architectural overview
architecture.intro=Little Goblin is a Grails application and which leads to a typical layout following the convention over configuration \
  principle. This page is intended to give you an overview about what goes where in this type of application. \
  You should open the Little Goblin project in your IDE (for example, IntelliJ IDEA) and have a look at the project's files.
architecture.link=Architectural overview
architecture.image.layout=Image showing basic project folder view.
arch.conf.head=conf (Configuration files)
arch.conf.intro=The conf folder contains the configuration files for Little Goblin.
arch.BootStrap.head=BootStrap
arch.BootStrap.desc=The BootStrap class is executed on each start of the application by the server. If your database is \
  empty, it will create the whole reference implementation from scrap. If you are going to develop your own game based upon \
  Little Goblin and need some heavy customizing, this is the file where you can create new objects or change the initial configuration.
arch.DataSource.head=DataSource
arch.DataSource.desc=In the DataSource class your database type is defined and configured. You can use PostgreSQL and MySQL \
  or any other Hibernate compatible database. During development, the DataSource is configured to delete the content of the \
  database and create all tables anew, so changes in the program's structure will be reflected automatically in the database.
arch.controller.head=controllers
arch.controller.desc=Little Goblin, like most Grails applications, follows the MVC (Model-View-Controller) pattern. A Controller \
  sits between the database model (and the domain objects) and the view (what gets delivered to the user's browser as HTML code).\
  The controller's job is to check the user's input, compute the effects of the user's action using the domain objects from the \
  database with the help of some Service objects and render the results based upon what the view templates define in the presentation layer.
arch.fightController.head=Example: the FightController
arch.fightController.desc=The FightController is a piece of code that determines the flow of events when a user starts a fight. It loads the \
  PlayerCharacter, the Mob (monster), calls upon extra classes (like the FightService) to determine who goes fist in a round of combat and \
  generally checks what happens. Then, it fills all the results and game data into a template file (called a View) and renders it to HTML, \
  which is then send back to the user who can now decide what he wants to do with the new situation.
arch.domain.head=domain (classes)
arch.domain.desc1=The domain directory contains the domain classes, which are the blueprints of definitions of all domain objects \
  in Little Goblin. A domain object is one which pertains to the specific domain of a program. For example, a game needs a player \
  object. Strings, Integers (1,2,...), Boolean (true, false) - those are not domain specific, and in fact they are already defined \
  by the Groovy and Java language. But the things which make up the larger structures of this game framework, those are (mostly) defined \
  inside the domain folder - if they are persistent.
arch.domain.desc2=Persistent objects are kept in database tables and fetched whenever needed. So, if you do not log in to play, your \
  player character will stay in the database all day long and will probably not change. But when you play, the object is retrieved \
  from the database, and the columns for name, levels, gold and so on will be turned into objects to be changed. And after the controllers \
  and service classes are done with them, the data that makes up your character is persisted to the database once more.
arch.domain.desc3=The domain classes are almost all interconnected. A Mob (Monster) is based upon MobTemplate, which is based upon Creature. \
  And each MobTemplate may have zero, one or more Image objects associated with it. And each Image is related to an Artist - and a License. \
  So, a domain class in Little Goblin defines two basic properties of the domain object: what values it holds (an Artist has a name, \
  just like a MobTemplate has one), and what kind of relations it has to other game objects. Some relations are one-to-one (Image to Artist),\
  while other may be one-to-many (MobTemplate to Images) or many-to-many (Categories to Items).
arch.i18n.head=i18n - Internationalization
arch.i18n.desc1=The i18n directory contains the messages.properties files for the different languages in which Little Goblin is or may be \
  available. A message file contains key-value pairs, separated by a "=". So, this paragraph has the message id "arch.i18n.desc". If a language \
  file contains this message id and a corresponding translation or text, it will be displayed when a user requests this page in that language.
arch.i18n.desc2=How does Little Goblin know which language you want? Your browser sends a list of preferred languages to the server. \
  Grails then picks the first one from the list (as this is probably the most important one) and when it has to display a page with \
  a message id in it, it looks if it has an entry in that language's file. Otherwise, the default message (in English) is displayed.
arch.i18n.desc3=Currently, all translations are inside those message files. At some future time, they will probably transferred into the \
  database, which will make it easier to change them and add new message ids dynamically. If you add a message id to the master file \
  (messages.properties), you should do so at the bottom so the translators can easier find the new entries. (It is probably also a good \
  idea to keep a change log in comment form inside the files, so you can see when entries have changed).
arch.services.head=services
arch.services.desc=Service classes are used to encapsulate pieces of game logic. They also are often used to access methods that can be re-used \
  in several controllers. For example, the FightController checks if a player character or monster is still alive and determines the order of \
  events during combat. While there may be many domain objects of any one domain class, services are single classes that are only created once. \
  They do not store their state in the database, because normally they do not have any state. They just live to serve.
arch.views.head=views
arch.views.desc1=A View is a file that describes how information collected by the controller from domain model objects is to be displayed. \
  Perhaps you know ASP, PHP or JSP files, which mix (a little) program code and HTML. GSP (Groovy Server Pages) are not much different. \
  Those files, which may include references to smaller building blocks, define how the user interface of Little Goblin looks like. If you want to \
  change how stuff is displayed, you have to edit the views.
arch.views.desc2=Note that some files in here do not have their own HTML header, because they are used by AJAX code in the controllers. Those \
  pieces are returned when the user performs an action like buying an item and then expects his gold to change or a message to appear. In cases \
  where only a tiny amount of information changes, only a part of a page is reloaded with JavaScript. This is much faster, but it makes the layout \
  more complex. To learn how everything fits together, start at the top level - files like show.gsp or index.gsp are good for that.

changes.0.2=<em>2011-03-25</em>: v0.2 Added architectural and video overview page.
video.link=Multimedia
click.to.enlarge=Click on image below to see a large version.
architecture.big.layout=This page as a large info graphic with some simple pictures.

video.configure.intellij=Configuring Little Goblin as a project in IntelliJ IDEA
video.configure.intellij.desc=Describes how to import the Little Goblin project into the IntelliJ IDEA IDE. It assumes that you already \
  have downloaded the source code and configured the database (see: <a href="http://dewarim.com/browsergame/development-resources/basic-requirements">Basic Requirements</a>) \
  You can request an Open Source License key for IntelliJ IDEA from the project admin if you wish to help with development of this browser game framework.
video.configure.intellij.mp4=as MP4
video.head=Videos
video.intro=This page collects links to tutorial videos and other multimedia files, so you can learn more about Little Goblin in a visual way.
video.translate.lg=How to translate Little Goblin
video.translate.lg.desc=A tutorial on YouTube how to translate the messages in Little Goblin with IntelliJ Idea.
video.as.mp4=MP4-Version
changes.0.3=<em>2011-03-29</em>: v0.3 Added another video link (translating LG).
changes.0.4=<em>2011-04-03</em>: v0.4 Added a new video link (editing LG) and the tools section.
changes.0.5=<em>2011-07-13</em>: v0.5 Added team page.
video.edit.lg=Editing Little Goblin
video.edit.lg.desc=How to make a change and commit it to the Subversion repository on Sourceforge.net

tools.title=Tools for the Little Goblin Browsergame Framework
tools.head=Tools for Little Goblin
tools.intro=This page contains a list of tools that you may need if you want to start working on Little Goblin itself or \
  a game project based upon the Little Goblin browser game framework.
tools.ide.head=IDE (Integrated Development Environment)
tools.intellij=<a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>
tools.intellij.desc=IntelliJ IDEA from Jetbrains is a very good all-round IDE, suitable for Grails, Java, Groovy and lots of other kinds of \
  development tasks. A project specific open source license is also available if you are a project member of the Little Goblin development team and \
  do not yet have a full version.
tools.sts=<a href="http://www.springsource.com/developer/sts">STS - SpringSource Tool Suite</a>
tools.sts.desc=An Eclipse based Java/Groovy/Grails IDE from the company that produces Groovy and Grails.
tools.eclipse=<a href="http://eclipse.org/">Eclipse</a>
tools.eclipse.desc=Eclipse a huge free IDE with many modules for things like subversion integration. You can always use \
  this, although it does not offer the full Grails integration that other IDEs do.
tools.link=Tools

team.head=Current team members and former contributors
team.current.head=Current team

team.former.head=Former contributors
team.former.info=Hey, no one left to date - that's how good we are! Come and join us, we won't bite.
team.title=Little Goblin: current team members and former contributors
team.dewarim=dewarim // Ingo Wiarda
team.dewarim.info=Project founder and administrator. Responsible for the show. Plays \
  traditional games (RPG, M:TG, board games) as well as computer games (SC2, LoL, many others)- \
  once in a while, because coding open source software often is more fun.
team.dewarim.homepage=Websites: <a href="http://dewarim.com">dewarim.com</a> [code,en] <a href="http://dewarim.de">dewarim.de</a> [personal,de]
team.task.coder=Program design and implementation
team.task.game.design=Game design
team.task.administration=Administration
team.task.hosting=Hosting
team.tasks=Tasks
team.jellina.head=jellina
team.keyznotized.head=keyznotized // Pauline Fratczak
team.keyznotized.info=Translator & noob programmer eager to improve her skills. Big fan of video games (GTA, CoD, and well, any \
  PS3 action game and many browser games). Enjoys her trip down open source coding lane!
team.siposoft.head=siposoft
team.link=The Little Goblin Team
changes.0.6=<em>2011-07-21</em>: v0.6 Added team info for Pauline Fratczak; added Grand Melee page to features list.

melee.title=Little Goblin - Grand Melee
melee.head=Grand Melee
melee.intro=The Grand Melee is an opportunity for players to pit their characters against each other in a no-holds-barred \
  fight to the last man (or woman - or goblin). You sign up and each round you get to pick whom to attack and in which way.
melee.1=The fight lasts until a winner has been determined. The game will wait for at least one minute before moving from \
  one round to the next. During this time you may assign a combat action to your character. If you do not act, \
  the game will select a random opponent for you and your character will attack automatically. This way, you have a chance to win \
  even though circumstances may prevent you from making your move on time.
melee.2=Possible combat actions are: attacking another player character, using an item for or against a character (or yourself) or \
  running away. \
  You fight with the items on your person and cannot replenish them once the melee has started. You may quit at any time \
  without incurring a penalty. Quitters will not be admitted into the Hall of Fame and have to wait until this melee is over \
  before they are admitted again to the grand melee. \
  It is possible to help other players or coordinate attacks. Yet, in the end it is everyone for \
  him-her-or-itself, so you will need to watch your back for attacks by those pretending to be your friends. \
  Do not hesitate to attack others of your order - there can be only one!
melee.status=Note: at the moment, some of the mentioned features (item use, hall of fame) have not been implemented yet,

changes.0.7=<em>2011-08-08</em>: v0.7 New design by Pauline
changes.0.7.1=<em>2012-11-18</em>: v0.7.1 Upgraded to Grails 2.1.0; added Github repository.